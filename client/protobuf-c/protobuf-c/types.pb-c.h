/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: types.proto */

#ifndef PROTOBUF_C_types_2eproto__INCLUDED
#define PROTOBUF_C_types_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/descriptor.pb-c.h"

typedef struct _HDNodeType HDNodeType;
typedef struct _HDNodePathType HDNodePathType;
typedef struct _CoinType CoinType;
typedef struct _MultisigRedeemScriptType MultisigRedeemScriptType;
typedef struct _TxInputType TxInputType;
typedef struct _TxOutputType TxOutputType;
typedef struct _TxOutputBinType TxOutputBinType;
typedef struct _TransactionType TransactionType;
typedef struct _TxRequestDetailsType TxRequestDetailsType;
typedef struct _TxRequestSerializedType TxRequestSerializedType;
typedef struct _IdentityType IdentityType;
typedef struct _XmrOutputType XmrOutputType;
typedef struct _XmrInputType XmrInputType;


/* --- enums --- */

/*
 **
 * Type of failures returned by Failure message
 * @used_in Failure
 */
typedef enum _FailureType {
  FAILURE_TYPE__Failure_UnexpectedMessage = 1,
  FAILURE_TYPE__Failure_ButtonExpected = 2,
  FAILURE_TYPE__Failure_SyntaxError = 3,
  FAILURE_TYPE__Failure_ActionCancelled = 4,
  FAILURE_TYPE__Failure_PinExpected = 5,
  FAILURE_TYPE__Failure_PinCancelled = 6,
  FAILURE_TYPE__Failure_PinInvalid = 7,
  FAILURE_TYPE__Failure_InvalidSignature = 8,
  FAILURE_TYPE__Failure_Other = 9,
  FAILURE_TYPE__Failure_NotEnoughFunds = 10,
  FAILURE_TYPE__Failure_NotInitialized = 11,
  FAILURE_TYPE__Failure_FirmwareError = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FAILURE_TYPE)
} FailureType;
/*
 **
 * Type of script which will be used for transaction output
 * @used_in TxOutputType
 */
typedef enum _OutputScriptType {
  OUTPUT_SCRIPT_TYPE__PAYTOADDRESS = 0,
  OUTPUT_SCRIPT_TYPE__PAYTOSCRIPTHASH = 1,
  OUTPUT_SCRIPT_TYPE__PAYTOMULTISIG = 2,
  OUTPUT_SCRIPT_TYPE__PAYTOOPRETURN = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OUTPUT_SCRIPT_TYPE)
} OutputScriptType;
/*
 **
 * Type of script which will be used for transaction output
 * @used_in TxInputType
 */
typedef enum _InputScriptType {
  INPUT_SCRIPT_TYPE__SPENDADDRESS = 0,
  INPUT_SCRIPT_TYPE__SPENDMULTISIG = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INPUT_SCRIPT_TYPE)
} InputScriptType;
/*
 **
 * Type of information required by transaction signing process
 * @used_in TxRequest
 */
typedef enum _RequestType {
  REQUEST_TYPE__TXINPUT = 0,
  REQUEST_TYPE__TXOUTPUT = 1,
  REQUEST_TYPE__TXMETA = 2,
  REQUEST_TYPE__TXFINISHED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REQUEST_TYPE)
} RequestType;
/*
 **
 * Type of button request
 * @used_in ButtonRequest
 */
typedef enum _ButtonRequestType {
  BUTTON_REQUEST_TYPE__ButtonRequest_Other = 1,
  BUTTON_REQUEST_TYPE__ButtonRequest_FeeOverThreshold = 2,
  BUTTON_REQUEST_TYPE__ButtonRequest_ConfirmOutput = 3,
  BUTTON_REQUEST_TYPE__ButtonRequest_ResetDevice = 4,
  BUTTON_REQUEST_TYPE__ButtonRequest_ConfirmWord = 5,
  BUTTON_REQUEST_TYPE__ButtonRequest_WipeDevice = 6,
  BUTTON_REQUEST_TYPE__ButtonRequest_ProtectCall = 7,
  BUTTON_REQUEST_TYPE__ButtonRequest_SignTx = 8,
  BUTTON_REQUEST_TYPE__ButtonRequest_FirmwareCheck = 9,
  BUTTON_REQUEST_TYPE__ButtonRequest_Address = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BUTTON_REQUEST_TYPE)
} ButtonRequestType;
/*
 **
 * Type of PIN request
 * @used_in PinMatrixRequest
 */
typedef enum _PinMatrixRequestType {
  PIN_MATRIX_REQUEST_TYPE__PinMatrixRequestType_Current = 1,
  PIN_MATRIX_REQUEST_TYPE__PinMatrixRequestType_NewFirst = 2,
  PIN_MATRIX_REQUEST_TYPE__PinMatrixRequestType_NewSecond = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PIN_MATRIX_REQUEST_TYPE)
} PinMatrixRequestType;

/* --- messages --- */

/*
 **
 * Structure representing BIP32 (hierarchical deterministic) node
 * Used for imports of private key into the device and exporting public key out of device
 * @used_in PublicKey
 * @used_in LoadDevice
 * @used_in DebugLinkState
 * @used_in Storage
 */
struct  _HDNodeType
{
  ProtobufCMessage base;
  uint32_t depth;
  uint32_t fingerprint;
  uint32_t child_num;
  ProtobufCBinaryData chain_code;
  protobuf_c_boolean has_private_key;
  ProtobufCBinaryData private_key;
  protobuf_c_boolean has_public_key;
  ProtobufCBinaryData public_key;
};
#define HDNODE_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hdnode_type__descriptor) \
    , 0, 0, 0, {0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _HDNodePathType
{
  ProtobufCMessage base;
  /*
   * BIP-32 node in deserialized form
   */
  HDNodeType *node;
  /*
   * BIP-32 path to derive the key from node
   */
  size_t n_address_n;
  uint32_t *address_n;
};
#define HDNODE_PATH_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hdnode_path_type__descriptor) \
    , NULL, 0,NULL }


/*
 **
 * Structure representing Coin
 * @used_in Features
 */
struct  _CoinType
{
  ProtobufCMessage base;
  char *coin_name;
  char *coin_shortcut;
  protobuf_c_boolean has_address_type;
  uint32_t address_type;
  protobuf_c_boolean has_maxfee_kb;
  uint64_t maxfee_kb;
  protobuf_c_boolean has_address_type_p2sh;
  uint32_t address_type_p2sh;
};
#define COIN_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin_type__descriptor) \
    , NULL, NULL, 0,0u, 0,0, 0,5u }


/*
 **
 * Type of redeem script used in input
 * @used_in TxInputType
 */
struct  _MultisigRedeemScriptType
{
  ProtobufCMessage base;
  /*
   * pubkeys from multisig address (sorted lexicographically)
   */
  size_t n_pubkeys;
  HDNodePathType **pubkeys;
  /*
   * existing signatures for partially signed input
   */
  size_t n_signatures;
  ProtobufCBinaryData *signatures;
  /*
   * "m" from n, how many valid signatures is necessary for spending
   */
  protobuf_c_boolean has_m;
  uint32_t m;
};
#define MULTISIG_REDEEM_SCRIPT_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&multisig_redeem_script_type__descriptor) \
    , 0,NULL, 0,NULL, 0,0 }


/*
 **
 * Structure representing transaction input
 * @used_in SimpleSignTx
 * @used_in TransactionType
 */
struct  _TxInputType
{
  ProtobufCMessage base;
  /*
   * BIP-32 path to derive the key from master node
   */
  size_t n_address_n;
  uint32_t *address_n;
  /*
   * hash of previous transaction output to spend by this input
   */
  ProtobufCBinaryData prev_hash;
  /*
   * index of previous output to spend
   */
  uint32_t prev_index;
  /*
   * script signature, unset for tx to sign
   */
  protobuf_c_boolean has_script_sig;
  ProtobufCBinaryData script_sig;
  /*
   * sequence
   */
  protobuf_c_boolean has_sequence;
  uint32_t sequence;
  /*
   * defines template of input script
   */
  protobuf_c_boolean has_script_type;
  InputScriptType script_type;
  /*
   * Filled if input is going to spend multisig tx
   */
  MultisigRedeemScriptType *multisig;
};
#define TX_INPUT_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tx_input_type__descriptor) \
    , 0,NULL, {0,NULL}, 0, 0,{0,NULL}, 0,4294967295u, 0,INPUT_SCRIPT_TYPE__SPENDADDRESS, NULL }


/*
 **
 * Structure representing transaction output
 * @used_in SimpleSignTx
 * @used_in TransactionType
 */
struct  _TxOutputType
{
  ProtobufCMessage base;
  /*
   * target coin address in Base58 encoding
   */
  char *address;
  /*
   * BIP-32 path to derive the key from master node; has higher priority than "address"
   */
  size_t n_address_n;
  uint32_t *address_n;
  /*
   * amount to spend in satoshis
   */
  uint64_t amount;
  /*
   * output script type
   */
  OutputScriptType script_type;
  /*
   * defines multisig address; script_type must be PAYTOMULTISIG
   */
  MultisigRedeemScriptType *multisig;
  /*
   * defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
   */
  protobuf_c_boolean has_op_return_data;
  ProtobufCBinaryData op_return_data;
};
#define TX_OUTPUT_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tx_output_type__descriptor) \
    , NULL, 0,NULL, 0, 0, NULL, 0,{0,NULL} }


/*
 **
 * Structure representing compiled transaction output
 * @used_in TransactionType
 */
struct  _TxOutputBinType
{
  ProtobufCMessage base;
  uint64_t amount;
  ProtobufCBinaryData script_pubkey;
};
#define TX_OUTPUT_BIN_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tx_output_bin_type__descriptor) \
    , 0, {0,NULL} }


/*
 **
 * Structure representing transaction
 * @used_in SimpleSignTx
 */
struct  _TransactionType
{
  ProtobufCMessage base;
  protobuf_c_boolean has_version;
  uint32_t version;
  size_t n_inputs;
  TxInputType **inputs;
  size_t n_bin_outputs;
  TxOutputBinType **bin_outputs;
  size_t n_outputs;
  TxOutputType **outputs;
  protobuf_c_boolean has_lock_time;
  uint32_t lock_time;
  protobuf_c_boolean has_inputs_cnt;
  uint32_t inputs_cnt;
  protobuf_c_boolean has_outputs_cnt;
  uint32_t outputs_cnt;
};
#define TRANSACTION_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction_type__descriptor) \
    , 0,0, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0 }


/*
 **
 * Structure representing request details
 * @used_in TxRequest
 */
struct  _TxRequestDetailsType
{
  ProtobufCMessage base;
  /*
   * device expects TxAck message from the computer
   */
  protobuf_c_boolean has_request_index;
  uint32_t request_index;
  /*
   * tx_hash of requested transaction
   */
  protobuf_c_boolean has_tx_hash;
  ProtobufCBinaryData tx_hash;
};
#define TX_REQUEST_DETAILS_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tx_request_details_type__descriptor) \
    , 0,0, 0,{0,NULL} }


/*
 **
 * Structure representing serialized data
 * @used_in TxRequest
 */
struct  _TxRequestSerializedType
{
  ProtobufCMessage base;
  /*
   * 'signature' field contains signed input of this index
   */
  protobuf_c_boolean has_signature_index;
  uint32_t signature_index;
  /*
   * signature of the signature_index input
   */
  protobuf_c_boolean has_signature;
  ProtobufCBinaryData signature;
  /*
   * part of serialized and signed transaction
   */
  protobuf_c_boolean has_serialized_tx;
  ProtobufCBinaryData serialized_tx;
};
#define TX_REQUEST_SERIALIZED_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tx_request_serialized_type__descriptor) \
    , 0,0, 0,{0,NULL}, 0,{0,NULL} }


/*
 **
 * Structure representing identity data
 * @used_in IdentityType
 */
struct  _IdentityType
{
  ProtobufCMessage base;
  /*
   * proto part of URI
   */
  char *proto;
  /*
   * user part of URI
   */
  char *user;
  /*
   * host part of URI
   */
  char *host;
  /*
   * port part of URI
   */
  char *port;
  /*
   * path part of URI
   */
  char *path;
  /*
   * identity index
   */
  protobuf_c_boolean has_index;
  uint32_t index;
};
#define IDENTITY_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&identity_type__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0u }


/*
 **
 * Structure representing VOUT data
 * @used XmrGenerateTxPrefixHash
 */
struct  _XmrOutputType
{
  ProtobufCMessage base;
  /*
   * -1 = account address
   */
  int32_t address_index;
  /*
   * amount 
   */
  uint64_t amount;
};
#define XMR_OUTPUT_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xmr_output_type__descriptor) \
    , 0, 0 }


/*
 **
 * Structure representing VIN data
 * @used XmrGenerateTxPrefixHash
 */
struct  _XmrInputType
{
  ProtobufCMessage base;
  /*
   * amount 
   */
  uint64_t amount;
  /*
   * computed from view_seckey || out_tx_pubkey
   */
  ProtobufCBinaryData derivation;
  /*
   * computed from derivation || out_tx_index
   */
  ProtobufCBinaryData eph_pubkey;
  /*
   * output tx index
   */
  uint64_t out_tx_index;
  /*
   * relative key offsets (limit to MIXIN: 20)
   */
  ProtobufCBinaryData offsets;
};
#define XMR_INPUT_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xmr_input_type__descriptor) \
    , 0, {0,NULL}, {0,NULL}, 0, {0,NULL} }


/* HDNodeType methods */
void   hdnode_type__init
                     (HDNodeType         *message);
size_t hdnode_type__get_packed_size
                     (const HDNodeType   *message);
size_t hdnode_type__pack
                     (const HDNodeType   *message,
                      uint8_t             *out);
size_t hdnode_type__pack_to_buffer
                     (const HDNodeType   *message,
                      ProtobufCBuffer     *buffer);
HDNodeType *
       hdnode_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hdnode_type__free_unpacked
                     (HDNodeType *message,
                      ProtobufCAllocator *allocator);
/* HDNodePathType methods */
void   hdnode_path_type__init
                     (HDNodePathType         *message);
size_t hdnode_path_type__get_packed_size
                     (const HDNodePathType   *message);
size_t hdnode_path_type__pack
                     (const HDNodePathType   *message,
                      uint8_t             *out);
size_t hdnode_path_type__pack_to_buffer
                     (const HDNodePathType   *message,
                      ProtobufCBuffer     *buffer);
HDNodePathType *
       hdnode_path_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hdnode_path_type__free_unpacked
                     (HDNodePathType *message,
                      ProtobufCAllocator *allocator);
/* CoinType methods */
void   coin_type__init
                     (CoinType         *message);
size_t coin_type__get_packed_size
                     (const CoinType   *message);
size_t coin_type__pack
                     (const CoinType   *message,
                      uint8_t             *out);
size_t coin_type__pack_to_buffer
                     (const CoinType   *message,
                      ProtobufCBuffer     *buffer);
CoinType *
       coin_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin_type__free_unpacked
                     (CoinType *message,
                      ProtobufCAllocator *allocator);
/* MultisigRedeemScriptType methods */
void   multisig_redeem_script_type__init
                     (MultisigRedeemScriptType         *message);
size_t multisig_redeem_script_type__get_packed_size
                     (const MultisigRedeemScriptType   *message);
size_t multisig_redeem_script_type__pack
                     (const MultisigRedeemScriptType   *message,
                      uint8_t             *out);
size_t multisig_redeem_script_type__pack_to_buffer
                     (const MultisigRedeemScriptType   *message,
                      ProtobufCBuffer     *buffer);
MultisigRedeemScriptType *
       multisig_redeem_script_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   multisig_redeem_script_type__free_unpacked
                     (MultisigRedeemScriptType *message,
                      ProtobufCAllocator *allocator);
/* TxInputType methods */
void   tx_input_type__init
                     (TxInputType         *message);
size_t tx_input_type__get_packed_size
                     (const TxInputType   *message);
size_t tx_input_type__pack
                     (const TxInputType   *message,
                      uint8_t             *out);
size_t tx_input_type__pack_to_buffer
                     (const TxInputType   *message,
                      ProtobufCBuffer     *buffer);
TxInputType *
       tx_input_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tx_input_type__free_unpacked
                     (TxInputType *message,
                      ProtobufCAllocator *allocator);
/* TxOutputType methods */
void   tx_output_type__init
                     (TxOutputType         *message);
size_t tx_output_type__get_packed_size
                     (const TxOutputType   *message);
size_t tx_output_type__pack
                     (const TxOutputType   *message,
                      uint8_t             *out);
size_t tx_output_type__pack_to_buffer
                     (const TxOutputType   *message,
                      ProtobufCBuffer     *buffer);
TxOutputType *
       tx_output_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tx_output_type__free_unpacked
                     (TxOutputType *message,
                      ProtobufCAllocator *allocator);
/* TxOutputBinType methods */
void   tx_output_bin_type__init
                     (TxOutputBinType         *message);
size_t tx_output_bin_type__get_packed_size
                     (const TxOutputBinType   *message);
size_t tx_output_bin_type__pack
                     (const TxOutputBinType   *message,
                      uint8_t             *out);
size_t tx_output_bin_type__pack_to_buffer
                     (const TxOutputBinType   *message,
                      ProtobufCBuffer     *buffer);
TxOutputBinType *
       tx_output_bin_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tx_output_bin_type__free_unpacked
                     (TxOutputBinType *message,
                      ProtobufCAllocator *allocator);
/* TransactionType methods */
void   transaction_type__init
                     (TransactionType         *message);
size_t transaction_type__get_packed_size
                     (const TransactionType   *message);
size_t transaction_type__pack
                     (const TransactionType   *message,
                      uint8_t             *out);
size_t transaction_type__pack_to_buffer
                     (const TransactionType   *message,
                      ProtobufCBuffer     *buffer);
TransactionType *
       transaction_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transaction_type__free_unpacked
                     (TransactionType *message,
                      ProtobufCAllocator *allocator);
/* TxRequestDetailsType methods */
void   tx_request_details_type__init
                     (TxRequestDetailsType         *message);
size_t tx_request_details_type__get_packed_size
                     (const TxRequestDetailsType   *message);
size_t tx_request_details_type__pack
                     (const TxRequestDetailsType   *message,
                      uint8_t             *out);
size_t tx_request_details_type__pack_to_buffer
                     (const TxRequestDetailsType   *message,
                      ProtobufCBuffer     *buffer);
TxRequestDetailsType *
       tx_request_details_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tx_request_details_type__free_unpacked
                     (TxRequestDetailsType *message,
                      ProtobufCAllocator *allocator);
/* TxRequestSerializedType methods */
void   tx_request_serialized_type__init
                     (TxRequestSerializedType         *message);
size_t tx_request_serialized_type__get_packed_size
                     (const TxRequestSerializedType   *message);
size_t tx_request_serialized_type__pack
                     (const TxRequestSerializedType   *message,
                      uint8_t             *out);
size_t tx_request_serialized_type__pack_to_buffer
                     (const TxRequestSerializedType   *message,
                      ProtobufCBuffer     *buffer);
TxRequestSerializedType *
       tx_request_serialized_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tx_request_serialized_type__free_unpacked
                     (TxRequestSerializedType *message,
                      ProtobufCAllocator *allocator);
/* IdentityType methods */
void   identity_type__init
                     (IdentityType         *message);
size_t identity_type__get_packed_size
                     (const IdentityType   *message);
size_t identity_type__pack
                     (const IdentityType   *message,
                      uint8_t             *out);
size_t identity_type__pack_to_buffer
                     (const IdentityType   *message,
                      ProtobufCBuffer     *buffer);
IdentityType *
       identity_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   identity_type__free_unpacked
                     (IdentityType *message,
                      ProtobufCAllocator *allocator);
/* XmrOutputType methods */
void   xmr_output_type__init
                     (XmrOutputType         *message);
size_t xmr_output_type__get_packed_size
                     (const XmrOutputType   *message);
size_t xmr_output_type__pack
                     (const XmrOutputType   *message,
                      uint8_t             *out);
size_t xmr_output_type__pack_to_buffer
                     (const XmrOutputType   *message,
                      ProtobufCBuffer     *buffer);
XmrOutputType *
       xmr_output_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xmr_output_type__free_unpacked
                     (XmrOutputType *message,
                      ProtobufCAllocator *allocator);
/* XmrInputType methods */
void   xmr_input_type__init
                     (XmrInputType         *message);
size_t xmr_input_type__get_packed_size
                     (const XmrInputType   *message);
size_t xmr_input_type__pack
                     (const XmrInputType   *message,
                      uint8_t             *out);
size_t xmr_input_type__pack_to_buffer
                     (const XmrInputType   *message,
                      ProtobufCBuffer     *buffer);
XmrInputType *
       xmr_input_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xmr_input_type__free_unpacked
                     (XmrInputType *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HDNodeType_Closure)
                 (const HDNodeType *message,
                  void *closure_data);
typedef void (*HDNodePathType_Closure)
                 (const HDNodePathType *message,
                  void *closure_data);
typedef void (*CoinType_Closure)
                 (const CoinType *message,
                  void *closure_data);
typedef void (*MultisigRedeemScriptType_Closure)
                 (const MultisigRedeemScriptType *message,
                  void *closure_data);
typedef void (*TxInputType_Closure)
                 (const TxInputType *message,
                  void *closure_data);
typedef void (*TxOutputType_Closure)
                 (const TxOutputType *message,
                  void *closure_data);
typedef void (*TxOutputBinType_Closure)
                 (const TxOutputBinType *message,
                  void *closure_data);
typedef void (*TransactionType_Closure)
                 (const TransactionType *message,
                  void *closure_data);
typedef void (*TxRequestDetailsType_Closure)
                 (const TxRequestDetailsType *message,
                  void *closure_data);
typedef void (*TxRequestSerializedType_Closure)
                 (const TxRequestSerializedType *message,
                  void *closure_data);
typedef void (*IdentityType_Closure)
                 (const IdentityType *message,
                  void *closure_data);
typedef void (*XmrOutputType_Closure)
                 (const XmrOutputType *message,
                  void *closure_data);
typedef void (*XmrInputType_Closure)
                 (const XmrInputType *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    failure_type__descriptor;
extern const ProtobufCEnumDescriptor    output_script_type__descriptor;
extern const ProtobufCEnumDescriptor    input_script_type__descriptor;
extern const ProtobufCEnumDescriptor    request_type__descriptor;
extern const ProtobufCEnumDescriptor    button_request_type__descriptor;
extern const ProtobufCEnumDescriptor    pin_matrix_request_type__descriptor;
extern const ProtobufCMessageDescriptor hdnode_type__descriptor;
extern const ProtobufCMessageDescriptor hdnode_path_type__descriptor;
extern const ProtobufCMessageDescriptor coin_type__descriptor;
extern const ProtobufCMessageDescriptor multisig_redeem_script_type__descriptor;
extern const ProtobufCMessageDescriptor tx_input_type__descriptor;
extern const ProtobufCMessageDescriptor tx_output_type__descriptor;
extern const ProtobufCMessageDescriptor tx_output_bin_type__descriptor;
extern const ProtobufCMessageDescriptor transaction_type__descriptor;
extern const ProtobufCMessageDescriptor tx_request_details_type__descriptor;
extern const ProtobufCMessageDescriptor tx_request_serialized_type__descriptor;
extern const ProtobufCMessageDescriptor identity_type__descriptor;
extern const ProtobufCMessageDescriptor xmr_output_type__descriptor;
extern const ProtobufCMessageDescriptor xmr_input_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_types_2eproto__INCLUDED */
