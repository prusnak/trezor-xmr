/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: storage.proto */

#ifndef PROTOBUF_C_storage_2eproto__INCLUDED
#define PROTOBUF_C_storage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "types.pb-c.h"

typedef struct _Storage Storage;


/* --- enums --- */


/* --- messages --- */

/*
 **
 * Internal persistent storage of device
 */
struct  _Storage
{
  ProtobufCMessage base;
  /*
   * version of storage
   */
  uint32_t version;
  /*
   * BIP-32 node (mnemonic cannot be used if this is present)
   */
  HDNodeType *node;
  /*
   * BIP-39 mnemonic (node cannot be used if this is present)
   */
  char *mnemonic;
  /*
   * whether to require passphrase to decrypt node or stretch mnemonic
   */
  protobuf_c_boolean has_passphrase_protection;
  protobuf_c_boolean passphrase_protection;
  /*
   * number of failed PIN attempts
   */
  protobuf_c_boolean has_pin_failed_attempts;
  uint32_t pin_failed_attempts;
  /*
   * current PIN
   */
  char *pin;
  /*
   * current language
   */
  char *language;
  /*
   * device label
   */
  char *label;
  /*
   * was storage imported from an external source?
   */
  protobuf_c_boolean has_imported;
  protobuf_c_boolean imported;
  /*
   * image used as homescreen (logo + label is used when not set)
   */
  protobuf_c_boolean has_homescreen;
  ProtobufCBinaryData homescreen;
};
#define STORAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&storage__descriptor) \
    , 0, NULL, NULL, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,{0,NULL} }


/* Storage methods */
void   storage__init
                     (Storage         *message);
size_t storage__get_packed_size
                     (const Storage   *message);
size_t storage__pack
                     (const Storage   *message,
                      uint8_t             *out);
size_t storage__pack_to_buffer
                     (const Storage   *message,
                      ProtobufCBuffer     *buffer);
Storage *
       storage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   storage__free_unpacked
                     (Storage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Storage_Closure)
                 (const Storage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor storage__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_storage_2eproto__INCLUDED */
